<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://localstack.cloud/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://localstack.cloud/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Amplify</title><link>https://localstack.cloud/docs/reference/amplify/</link><pubDate>Fri, 25 Jun 2021 18:02:42 +0200</pubDate><guid>https://localstack.cloud/docs/reference/amplify/</guid><description>Details coming soon.</description></item><item><title>API Gateway V2</title><link>https://localstack.cloud/docs/reference/apigatewayv2/</link><pubDate>Fri, 25 Jun 2021 17:55:39 +0200</pubDate><guid>https://localstack.cloud/docs/reference/apigatewayv2/</guid><description>Basic support for API Gateway V2 is included in the Pro version, which allows for creation of local WebSocket APIs for long-lived connections and bi-directional communication between the API and your clients.
For example, given the following Serverless configuration:
... plugins: - serverless-localstack functions: actionHandler: handler: handler.handler events: - websocket: route: test-action Upon deployment of the Serverless project, a new API Gateway V2 endpoint will be created in LocalStack. The awslocal CLI can be used to get the list of APIs, which should contain the WebSocket endpoint, e.</description></item><item><title>AppSync</title><link>https://localstack.cloud/docs/reference/appsync/</link><pubDate>Fri, 25 Jun 2021 17:58:46 +0200</pubDate><guid>https://localstack.cloud/docs/reference/appsync/</guid><description>Basic support for AppSync is included in LocalStack Pro. The local AppSync API allows you to spin up local GraphQL APIs and directly expose your data sources (e.g., DynamoDB tables) to external clients.
For example, you can create a DynamoDB table &amp;quot;posts&amp;quot; with a key attribute id, and define a GraphQL schema in a file schema.graphql like this:
schema { query: Query } type Query { getPosts: [Post!]! } type Post { id: DDBString!</description></item><item><title>Athena</title><link>https://localstack.cloud/docs/reference/athena/</link><pubDate>Fri, 25 Jun 2021 17:51:58 +0200</pubDate><guid>https://localstack.cloud/docs/reference/athena/</guid><description>LocalStack Pro ships with built-in support for Athena, Amazon&amp;rsquo;s serverless data warehouse and analytics platform. Athena uses Presto under the covers, and your Athena instance will be automatically configured with a Hive metastore that connects seamlessly to the LocalStack S3 API. That is, you can easily connect your local S3 buckets and query data directly from S3 via the powerful Athena query API.
The following commands illustrate how to use Athena from the command line (assuming you have awslocal installed):</description></item><item><title>Backup</title><link>https://localstack.cloud/docs/reference/backup/</link><pubDate>Sun, 27 Jun 2021 16:01:19 +0200</pubDate><guid>https://localstack.cloud/docs/reference/backup/</guid><description>The Backup API allows to manage backup plans, to create scheduled or on-demand backups of certain resource types like DynamoDB tables or RDS databases. Details following soon&amp;hellip;</description></item><item><title>CloudFront</title><link>https://localstack.cloud/docs/reference/cloudfront/</link><pubDate>Fri, 25 Jun 2021 17:57:25 +0200</pubDate><guid>https://localstack.cloud/docs/reference/cloudfront/</guid><description>LocalStack Pro supports creation of local CloudFront distributions, which allows you to transparently access your applications and file artifacts via CloudFront URLs like https://abc123.cloudfront.net.
For example, take the following simple example which creates an S3 bucket, puts a small text file hello.txt to the bucket, and then creates a CloudFront distribution which makes the file accessible via a https://abc123.cloudfront.net/hello.txt proxy URL (where abc123 is a placeholder for the real distribution ID):</description></item><item><title>CodeCommit</title><link>https://localstack.cloud/docs/reference/codecommit/</link><pubDate>Fri, 25 Jun 2021 18:15:28 +0200</pubDate><guid>https://localstack.cloud/docs/reference/codecommit/</guid><description>LocalStack Pro contains basic support for CodeCommit code repositories. The CodeCommit API can be used to create Git repositories, clone these repos to local folders, push commits with changes, etc.
A simple example has been added in this Github repository. The sample creates an Git repository via the AWS CodeCommit API locally, commits and pushes a test file to the repository, and then checks out the file in a fresh clone of the repository.</description></item><item><title>Cognito</title><link>https://localstack.cloud/docs/reference/cognito/</link><pubDate>Fri, 25 Jun 2021 17:49:09 +0200</pubDate><guid>https://localstack.cloud/docs/reference/cognito/</guid><description>LocalStack Pro contains basic support for authentication via AWS Cognito. You can create Cognito user pools, sign up and confirm users, and use the COGNITO_USER_POOLS authorizer integration with API Gateway.
For example, if you happen to use Serverless to deploy your application, take this snippet of a serverless.yml configuration:
service: test plugins: - serverless-deployment-bucket - serverless-pseudo-parameters - serverless-localstack custom: localstack: stages: [local] functions: http_request: handler: http.request events: - http: path: v1/request authorizer: arn: arn:aws:cognito-idp:us-east-1:#{AWS::AccountId}:userpool/UserPool resources: Resources: UserPool: Type: AWS::Cognito::UserPool Properties: .</description></item><item><title>Elastic Container Registry (ECR)</title><link>https://localstack.cloud/docs/reference/elastic-container-registry/</link><pubDate>Fri, 25 Jun 2021 17:37:52 +0200</pubDate><guid>https://localstack.cloud/docs/reference/elastic-container-registry/</guid><description>A basic version of Elastic Container Registry (ECR) is available to store application images. ECR is often used in combination with other APIs that deploy containerized apps, like ECS or EKS.
$ awslocal ecr create-repository --repository-name repo1 { &amp;quot;repository&amp;quot;: { &amp;quot;repositoryArn&amp;quot;: &amp;quot;arn:aws:ecr:us-east-1:000000000000:repository/repo1&amp;quot;, &amp;quot;registryId&amp;quot;: &amp;quot;abc898c8&amp;quot;, &amp;quot;repositoryName&amp;quot;: &amp;quot;repo1&amp;quot;, &amp;quot;repositoryUri&amp;quot;: &amp;quot;localhost:4510/repo1&amp;quot; } } You can then build and tag a new Docker image, and push it to the repository URL (localhost:4510/repo1 in the example above):</description></item><item><title>Elastic Container Service (ECS)</title><link>https://localstack.cloud/docs/reference/elastic-container-service/</link><pubDate>Fri, 25 Jun 2021 17:36:22 +0200</pubDate><guid>https://localstack.cloud/docs/reference/elastic-container-service/</guid><description>Basic support for creating and deploying containerized apps using ECS is provided in the Pro version. LocalStack offers the basic APIs locally, including creation of ECS task definitions, services, and tasks.
By default, the ECS Fargate launch type is assumed, i.e., the local Docker engine is used for deployment of applications, and there is no need to create and manage EC2 virtual machines to run the containers.
Note that more complex features like integration of application load balancers (ALBs) are currently not available, but are being developed and will be available in the near future.</description></item></channel></rss>