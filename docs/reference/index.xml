<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://localstack.cloud/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://localstack.cloud/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Backup</title><link>https://localstack.cloud/docs/reference/backup/</link><pubDate>Sun, 27 Jun 2021 16:01:19 +0200</pubDate><guid>https://localstack.cloud/docs/reference/backup/</guid><description>The Backup API allows to manage backup plans, to create scheduled or on-demand backups of certain resource types like DynamoDB tables or RDS databases. Details following soon&amp;hellip;</description></item><item><title>Test Report Dashboards</title><link>https://localstack.cloud/docs/reference/test-report-dashboards/</link><pubDate>Fri, 25 Jun 2021 18:29:38 +0200</pubDate><guid>https://localstack.cloud/docs/reference/test-report-dashboards/</guid><description>LocalStack allows for transparent collection of execution events, in order to provide usage analytics and insights into the testing process overall. Simply configure your system with the LOCALSTACK_API_KEY environment variable, and the system will start making your events accessible on the LocalStack dashboard at https://app.localstack.cloud/dashboard.
Please note that data privacy is one of our key concerns; data is only collected in an anonymized way, and never exposes any sensitive information about your application.</description></item><item><title>Multi-Account Setups</title><link>https://localstack.cloud/docs/reference/multi-account-setups/</link><pubDate>Fri, 25 Jun 2021 18:28:40 +0200</pubDate><guid>https://localstack.cloud/docs/reference/multi-account-setups/</guid><description>Unlike the open source LocalStack, which uses a single hardcoded account ID (000000000000), the Pro version allows to use multiple instances for different AWS account IDs in parallel.
In order to set up a multi-account environment, simply configure the TEST_AWS_ACCOUNT_ID to include a comma-separated list of account IDs. For example, use the following to start up LocalStack with two account IDs:
$ TEST_AWS_ACCOUNT_ID=000000000001,000000000002 SERVICES=s3 localstack start You can then use AWS_ACCESS_KEY_ID to address resources in the two separate account instances:</description></item><item><title>Multi-Region Support</title><link>https://localstack.cloud/docs/reference/multi-region-support/</link><pubDate>Fri, 25 Jun 2021 18:26:35 +0200</pubDate><guid>https://localstack.cloud/docs/reference/multi-region-support/</guid><description>While the open source version of LocalStack can only be configured to use a single region (e.g., us-east-1), the Pro version contains several extensions that allow resources to be addressed across regions, using their unique ARN identifiers.</description></item><item><title>Local DNS Server</title><link>https://localstack.cloud/docs/reference/local-dns-server/</link><pubDate>Fri, 25 Jun 2021 18:24:58 +0200</pubDate><guid>https://localstack.cloud/docs/reference/local-dns-server/</guid><description>LocalStack Pro supports transparent execution mode, which means that your application code automatically accesses the LocalStack APIs on localhost, as opposed to the real APIs on AWS. In contrast, the community (open source) edition requires the application code to configure each AWS SDK client instance with the target endpoint URL to point to the respective ports on localhost (see list of default ports here).
When the system starts up, the log output contains the IP address of the local DNS server.</description></item><item><title>Local Cloud Pods</title><link>https://localstack.cloud/docs/reference/local-cloud-pods/</link><pubDate>Fri, 25 Jun 2021 18:22:00 +0200</pubDate><guid>https://localstack.cloud/docs/reference/local-cloud-pods/</guid><description>Local Cloud Pods are a mechanism that allows you to take a snapshot of your local instance, persist it to a storage backend (e.g., git repository), and easily share it out with your team members.
You can create and manage local Cloud pods via the Web UI, and in order to load and store the persistent state of pods you can use the localstack command line interface (CLI).
Below is a simple example of how you can push and pull Local Cloud Pods using the localstack command line:</description></item><item><title>Identity and Access Management (IAM)</title><link>https://localstack.cloud/docs/reference/iam/</link><pubDate>Fri, 25 Jun 2021 18:19:14 +0200</pubDate><guid>https://localstack.cloud/docs/reference/iam/</guid><description>By default, LocalStack uses not enforce security policies for client requests. The IAM security enforcement feature can be used to test your security policies and create a more realistic environment that more closely resembles real AWS.
Please note: The environment configuration ENFORCE_IAM=1 is required to enable this feature (by default, IAM enforcement is disabled).
Below is a simple example that illustrates the use of IAM policy enforcement. It first attempts to create an S3 bucket with the default user (which fails), then create a user and attempts to create a bucket with that user (which fails again), and then finally attaches a policy to the user to allow s3:CreateBucket, which allows the bucket to be created.</description></item><item><title>Kinesis Data Analytics</title><link>https://localstack.cloud/docs/reference/kinesis/</link><pubDate>Fri, 25 Jun 2021 18:17:46 +0200</pubDate><guid>https://localstack.cloud/docs/reference/kinesis/</guid><description>The Kinesis Data Analytics API allows you to run continuous SQL queries directly over your Kinesis data streams. Basic support is included in LocalStack Pro - it allows you to create Kinesis Analytics applications, define input and output streams and schema types, and run continuous queries locally.
A simple example has been added to this sample repository on Github. More details are following soon.</description></item><item><title>CodeCommit</title><link>https://localstack.cloud/docs/reference/codecommit/</link><pubDate>Fri, 25 Jun 2021 18:15:28 +0200</pubDate><guid>https://localstack.cloud/docs/reference/codecommit/</guid><description>LocalStack Pro contains basic support for CodeCommit code repositories. The CodeCommit API can be used to create Git repositories, clone these repos to local folders, push commits with changes, etc.
A simple example has been added in this Github repository. The sample creates an Git repository via the AWS CodeCommit API locally, commits and pushes a test file to the repository, and then checks out the file in a fresh clone of the repository.</description></item><item><title>Simple Email Service (SES)</title><link>https://localstack.cloud/docs/reference/ses/</link><pubDate>Fri, 25 Jun 2021 18:13:30 +0200</pubDate><guid>https://localstack.cloud/docs/reference/ses/</guid><description>The Pro version ships with extended support Simple Email Service (SES), including a simple user interface to inspect email accounts and sent messages, as well as support for sending SES messages through an actual SMTP email server.
Please refer to the Configuration section for instructions on how to configure the connection parameters of your SMTP server (SMTP_HOST/SMTP_USER/SMTP_PASS).
Once your SMTP server has been configured, you can use the SES user interface in the Web app to create a new email account (e.</description></item></channel></rss>